@page "/"

<PageTitle>Static Web App - Stock App PWA</PageTitle>

@using StockApp.Shared
@using System.Text.Json

@inject HttpClient Http

<h3>Stock Price</h3>

<input @bind="stockSymbol" placeholder="Enter stock symbol" />
<button @onclick="GetStockPrice">Get Price</button>

@if (isLoading)
{
    <p>Loading stock data...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (chartResult != null)
{
    <div>
        <h3>Symbol: @chartResult.Chart.Result.FirstOrDefault().Meta.Symbol</h3>
        <h3>Price: @chartResult.Chart.Result.FirstOrDefault().Meta.RegularMarketPrice </h3>
        <ul>
            <li>Open: @string.Join(", ", @chartResult.Chart.Result.FirstOrDefault().Indicators.Quote.FirstOrDefault().Open)</li>
            <li>Close: @string.Join(", ", @chartResult.Chart.Result.FirstOrDefault().Indicators.Quote.FirstOrDefault().Close)</li>
            <li>High: @string.Join(", ", @chartResult.Chart.Result.FirstOrDefault().Indicators.Quote.FirstOrDefault().High)</li>
            <li>Low: @string.Join(", ", @chartResult.Chart.Result.FirstOrDefault().Indicators.Quote.FirstOrDefault().Low)</li>
        </ul>
    </div>

    <pre>@rawJson</pre> <!-- Displaying raw data; format as needed -->
}
else
{
    <p>No stock data available.</p>
}

@code {
    private string stockSymbol;
    private double stockPrice;
    private string interval = "1d";
    private string range = "5d";
    private ChartResult? chartResult;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string rawJson = string.Empty;

    private async Task GetStockPrice()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Call your Azure Function API
            var apiUrl = $"api/stockprice/{stockSymbol}?interval={interval}&range={range}";

            // Deserialize the response into ApiResponseWrapper<ChartResult>
            var response = await Http.GetFromJsonAsync<ApiResponseWrapper<ChartResult>>(apiUrl);

            if (response?.Value == null)
            {
                errorMessage = "No data received from the server.";
            }
            else
            {
                // Extract the actual ChartResult from the wrapper
                chartResult = response.Value;

                // Serialize the chartResult object back to JSON
                rawJson = JsonSerializer.Serialize(chartResult, new JsonSerializerOptions { WriteIndented = true });
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load stock data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
