@page "/watchlist"
@using System.Collections.Generic
@using Newtonsoft.Json
@using StockApp.Client.Interfaces
@using StockApp.Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IToastService ToastService
@inject IWatchlistService WatchListService
@inject IQuoteService quoteService

<AuthorizeView>
    <Authorized Context="authContext">
        <h3>Search</h3>

        <FluentAutocomplete TOption="String"
                            AutoComplete="off"
                            Autofocus="true"
                            Label="Select a Symbol:"
                            Placeholder="Select stocks"
                            OnOptionsSearch="@OnSearchAsync"
                            MaximumSelectedOptions="3"
                            OptionText="@(item => item)"
                            @bind-SelectedOptions="@MyWatchList" 
                            OnChange="OnStockChange"
                            width="100%" />

        <p>
            <b>Selected</b>: @(String.Join(" - ", MyWatchList.Select(i => i)))
        </p>

        <h3>Watchlist</h3>

        <table>
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if ((MyWatchList == null || !MyWatchList.Any()))
                {
                    <h4>Loading ...</h4>
                    <div style="width: 100%; display: grid; grid-gap: 12px; grid-auto-flow: column;">
                        <FluentProgress></FluentProgress>
                    </div>
                }
                else
                {
                    @foreach (var stock in MyWatchList)
                    {
                        <tr>
                            <td>@stock</td>
                            <td>
                                <FluentButton Appearance="@Appearance.Neutral"
                                              OnClick="() => RemoveStock(stock)"
                                              IconStart="@(new Icons.Regular.Size20.SubtractCircle())"
                                              Loading="@isLoading">
                                    Remove
                                </FluentButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <p>
            <FluentButton Appearance="@Appearance.Accent"
                          OnClick="@SaveWatchList"
                          IconStart="@(new Icons.Regular.Size20.Save())"
                          Loading="@isLoading">
                Save Watchlist
            </FluentButton>
        </p>

        @if (loadingMessage != null)
        {
            <p>@loadingMessage</p>
        }

    </Authorized>
    <NotAuthorized>
        <p>Please log in to manage your watchlist.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Watch watch;
    private string userId;
    private bool watchListFound;
    private string loadingMessage;
    private IEnumerable<String> MyWatchList = Array.Empty<String>();
    int counter = 1;
    private bool isLoading = false;

    private async Task OnSearchAsync(OptionsSearchEventArgs<String> e)
    {
        e.Items = quoteService.Symbols.Where((i => i.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)))
                                  .AsEnumerable();
    }

    private void OnStockChange(ChangeEventArgs e)
    {
        var newValue = e.Value.ToString();
        if (!string.IsNullOrEmpty(newValue))
        {
            if (!MyWatchList.Contains(newValue))
            {
                AddStock(newValue);
            }
            else
            {
                RemoveStock(newValue);
            }            
        }
    }

    private async Task AddStock(string stock)
    {
        if (!string.IsNullOrWhiteSpace(stock) && !StockExists(stock))
        {
            MyWatchList = MyWatchList.Append(stock).ToList();
            ShowToast("Added", stock, ToastIntent.Success);
            loadingMessage = $"Added {stock}.";
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
            loadingMessage = $"Invalid {stock}.";
        }
    }

    private void RemoveStock(string stock)
    {
        if (!string.IsNullOrWhiteSpace(stock))
        {
            MyWatchList = MyWatchList.Where(t => t != stock).ToList();
            ShowToast("Removed", stock, ToastIntent.Success);
            loadingMessage = $"Removed {stock}.";
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
            loadingMessage = $"Invalid {stock}.";
        }
    }

    private bool StockExists(string stock)
    {
        var exists = MyWatchList.Contains(stock);

        if (exists)
        {
            ShowToast(stock, "exists.", ToastIntent.Warning);
        }
        return exists;
    }

    private void SaveWatchList()
    {
        isLoading = true;
        var saveWatch = new Watch
            {
                Id = userId,
                UserId = userId, 
                WatchList = new List<string>(MyWatchList)
            };
        string actionTaken;

        if (watchListFound)
        {
            WatchListService.UpdateWatchlist(saveWatch);
            actionTaken = "Updated";
        }
        else
        {
            WatchListService.SaveWatchlist(saveWatch);
            watchListFound = true;
            actionTaken = "Saved";
        }

        loadingMessage = $"{actionTaken} Watchlist.";

        ShowToast("Saved", "Data " + actionTaken, ToastIntent.Success);

        Console.WriteLine("Watchlist saved: " + "Data: " + actionTaken + JsonConvert.SerializeObject(saveWatch));

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        // Simulate a delay to test the loading animation
        await Task.Delay(1000); // 1 seconds delay
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity.Name;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                watch = await WatchListService.GetWatchlist(user.Identity.Name);
                
                if ((MyWatchList != null) || (!MyWatchList.Any()))
                {
                    MyWatchList = watch.WatchList;
                    watchListFound = true;
                }
                loadingMessage = null; 
            }
            catch (Exception)
            {
                loadingMessage = "No existing watchlist found. You can create a new one.";
            }
        }
    }

    void ShowToast(string action, string symbol, ToastIntent intent)
    {
        var message = $"{action} Stock {symbol} #{counter++}";
        ToastService.ShowToast(intent, message);
    }
}
