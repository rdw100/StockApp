@page "/watchlist"
@using System.Collections.Generic
@using Newtonsoft.Json
@using StockApp.Client.Interfaces
@using StockApp.Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject IToastService ToastService
@inject IWatchlistService WatchListService
@inject IQuoteService quoteService

<AuthorizeView>
    <Authorized Context="authContext">
        <h3>Search</h3>
        <h6>Select a Symbol:</h6>
        <FluentStack HorizontalAlignment="@HorizontalAlignment.Start" VerticalAlignment="@VerticalAlignment.Center">
            <FluentAutocomplete TOption="String"
                AutoComplete="off"
                Autofocus="true"
                Placeholder="Select stocks"
                OnOptionsSearch="@OnSearchAsync"
                MaximumSelectedOptions="3"
                OptionText="@(item => item)"
                @bind-SelectedOptions="@MyWatchList"                            
                @onchange="OnStockChange"
                    Width="250px" />
            <FluentButton Id="saveWatchlist" Appearance="@Appearance.Accent"
                OnClick="@(() => Save())"
                IconStart="@(new Icons.Regular.Size20.SaveArrowRight())"
                Loading="@isLoading">
                Save Watchlist 5
            </FluentButton>
            <FluentTooltip Anchor="saveWatchlist" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom>
                Save your watchlist to view stock data.
            </FluentTooltip>
        </FluentStack>

        <h3>Watchlist</h3>

        <div style="display: table; table-layout: fixed; width: 100%;">
            <div style="overflow-x: auto;">
                <FluentDataGrid @ref="myStockGrid" Style="min-width: max-content;" Items="@quotes" Loading="@isLoading">
                    <ChildContent>
                        <PropertyColumn Title="Symbol" Property="@(q => q.Symbol)" />
                        <PropertyColumn Title="Price" Property="@(q => q.RegularMarketPrice)" Format="C" />
                        <PropertyColumn Title="Change" Property="@(q => (q.RegularMarketChange) /100 )" Format="#0.00%" />
                        <TemplateColumn>
                            <FluentButton Appearance="Appearance.Neutral" IconStart="@(new Icons.Regular.Size20.Glasses())"
                                          OnClick="@(() => ShowStock(context.Symbol))" />
                        </TemplateColumn>
                    </ChildContent>
                    <LoadingContent>
                        <h6>Loading ...</h6>
                        <FluentProgress Style="min-width: max-content;"></FluentProgress>
                    </LoadingContent>
                </FluentDataGrid>
            </div>
        </div>
        <FluentStack HorizontalAlignment="@HorizontalAlignment.End"
                     VerticalAlignment="@VerticalAlignment.Center">
            @if (loadingMessage != null)
            {
                @loadingMessage
            }
            @if (errorMessage != null)
            {
                <span style="color: red;">@errorMessage</span>
            }
        </FluentStack>
    </Authorized>
    <NotAuthorized>
        <p>Please log in to manage your watchlist.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Watch watch;
    private string userId;
    private bool watchListFound;
    private string loadingMessage;
    private string errorMessage;
    private IEnumerable<String> MyWatchList = Array.Empty<String>();
    int counter = 1;
    private bool isLoading = false;
    FluentDataGrid<Result> myStockGrid;

    private async Task OnSearchAsync(OptionsSearchEventArgs<String> e)
    {
        e.Items = quoteService.Symbols.Where((i => i.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)))
                                  .AsEnumerable();
    }

    private void OnStockChange(ChangeEventArgs e)
    {
        var newValue = e.Value.ToString();

        if (!string.IsNullOrEmpty(newValue))
        {
            if (!MyWatchList.Contains(newValue))
            {
                AddStock(newValue);
            }
            else
            {
                RemoveStock(newValue);
            }
        }
    }

    private void ShowStock(string stock)
    {
        navigationManager.NavigateTo($"/candlestick?symbol={stock}");
    }

    private async Task AddStock(string stock)
    {
        if (!string.IsNullOrWhiteSpace(stock) && !StockExists(stock))
        {
            MyWatchList = MyWatchList.Append(stock).ToList();

            ShowToast("Added", stock, ToastIntent.Success);
            loadingMessage = $"Added {stock}.";
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
            loadingMessage = $"Invalid {stock}.";
        }
    }

    private void RemoveStock(string stock)
    {
        if (!string.IsNullOrWhiteSpace(stock))
        {
            MyWatchList = MyWatchList.Where(t => t != stock).ToList();
            //quotes = quotes.Where(q => q.Symbol != stock);

            ShowToast("Removed", stock, ToastIntent.Success);
            loadingMessage = $"Removed {stock}.";
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
            loadingMessage = $"Invalid {stock}.";
        }
    }

    private bool StockExists(string stock)
    {
        var exists = MyWatchList.Contains(stock);

        if (exists)
        {
            ShowToast(stock, "exists.", ToastIntent.Warning);
        }
        return exists;
    }

    private async Task Save()
    {
        isLoading = true;
        var saveWatch = new Watch
            {
                Id = userId,
                UserId = userId,
                WatchList = new List<string>(MyWatchList)
            };
        string actionTaken;

        if (watchListFound)
        {
            WatchListService.UpdateWatchlist(saveWatch);
            actionTaken = "Updated";
        }
        else
        {
            WatchListService.SaveWatchlist(saveWatch);
            watchListFound = true;
            actionTaken = "Saved";
        }

        quotes = await GetStocks(MyWatchList.ToArray());

        loadingMessage = $"{actionTaken} Watchlist.";

        ShowToast("Saved", "Data " + actionTaken, ToastIntent.Success);

        Console.WriteLine("Watchlist saved: " + "Data: " + actionTaken + JsonConvert.SerializeObject(saveWatch));

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        // Simulate a delay to test the loading animation
        await Task.Delay(1000); // 1 seconds delay
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity.Name;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                watch = await WatchListService.GetWatchlist(user.Identity.Name);

                if ((MyWatchList != null) || (!MyWatchList.Any()))
                {
                    MyWatchList = watch.WatchList;

                    quotes = await GetStocks(MyWatchList.ToArray());

                    watchListFound = true;
                }
                loadingMessage = null; 
            }
            catch (Exception)
            {
                loadingMessage = "No existing watchlist found. You can create a new one.";
            }
        }
        isLoading = false;
    }

    void ShowToast(string action, string symbol, ToastIntent intent)
    {
        var message = $"{action} Stock {symbol} #{counter++}";
        ToastService.ShowToast(intent, message);
    }

    private IQueryable<Result> quotes;

    private async Task<IQueryable<Result>> GetStocks(string[] symbols)
    {
        var quoteResult = await quoteService.GetQuotesData(symbols);
        IQueryable<Result> queryableQuotes = quoteResult.Data.QuoteResponse.Result.AsQueryable();
        return queryableQuotes;
    }
}