@using StockApp.Client.Interfaces
@using StockApp.Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using ScottPlot.Blazor
@using ScottPlot.Finance
@using ScottPlot
@inject IQuoteService quoteService
@attribute [Authorize]

@if (loadFailed)
{
    <p><span style="color: red;">@errorMessage</span></p>
}
else if (quoteData is null)
{
    <h4>Populating ...</h4>
    <div style="width: 100%; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@* else if (!quoteData.Any())
{
    <h4>Loading ...</h4>
    <div style="width: 100%; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
else if (quoteData is not null) *@
else
{
    <h3>Investors Watch</h3>

    <FluentHorizontalScroll Speed="600" Easing=ScrollEasing.EaseInOut Style="width:auto;height:150px;">
        @if (quoteData is not null)
        {
            @foreach (var quote in quoteData)
            {
                <FluentCard>

                    <h5><a href="/candlestick?symbol=@quote.Symbol">@quote.Symbol</a></h5>
                    <h6 style="width:125px;">@GetShortName(@quote.ShortName, 15)</h6>
                    <span class="label">@quote.RegularMarketPrice.ToString("F2")</span>
                    <span class="value @(quote.RegularMarketChange >= 0 ? "text-success" : "text-danger")">@quote.RegularMarketChangePercent.ToString("F2")%</span>
                </FluentCard>
            }
        }
    </FluentHorizontalScroll>
}

@code {
    private bool loadFailed = false;
    private string errorMessage = string.Empty;
    public string[] Symbol { get; set; } = { "NFLX", "AMZN", "GOOG", "TSLA", "DIS", "AAPL", "AMD", "NVDA", "JPM", "F", "MSFT", "PYPL", "INTC" };

    private List<Result> quoteData = new();


    private string GetShortName(string name, int maxLength)
    {
        if (string.IsNullOrEmpty(name))
        {
            return name;
        }
        return name.Length <= maxLength ? name : name.Substring(0, maxLength) + "...";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiResponse = await quoteService.GetQuotesData(Symbol);
            if (apiResponse.Data is not null)
            {
                quoteData = apiResponse.Data.QuoteResponse.Result;
                loadFailed = false;
            }
        }
        catch (Exception ex)
        {
            loadFailed = true;
            errorMessage = $"Error: {ex.Message}";
        }
    }
}